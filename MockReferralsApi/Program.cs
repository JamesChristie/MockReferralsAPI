using Microsoft.EntityFrameworkCore;
using MockReferralsAPI.Models;
using MockReferralsAPI.Services;

var builder = WebApplication.CreateBuilder(args);

// NOTE (jchristie@8thlight.com) In addition to the documentation
// generated by this, there is summary documentation in the README
builder.Services.AddOpenApi("v1");

builder.Services.AddControllers();
builder.Services.AddDbContext<ReferralsContext>(
    (serviceProvider, optionsBuilder) => optionsBuilder
        .UseInMemoryDatabase("MockReferralsApiDb")
        .UseInternalServiceProvider(serviceProvider)
);

builder.Services.AddScoped<IStoreReferralRecords, ReferralsDatastore>();
builder.Services.AddScoped<IGenerateReferralLinks, ConstantLinkGenerator>();

// Concrete Implementations for Dependency Injection
// builder.Services.AddScoped<>();

var app = builder.Build();
if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
}

// NOTE (jchristie@8thlight.com) While this would normally be enabled
// as a default in all applications, this is an example project not
// targeted for production. To avoid messiness with setting up
// temporary certificates or skipping them, this is disabled to
// provide a review experience with less friction. The function call
// has been left commented for explanatory purposes.
//
// app.UseHttpsRedirection();

app.Run();